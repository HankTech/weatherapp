{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Form","cityRef","React","createRef","countryRef","weatherSearch","e","preventDefault","search","city","current","value","country","queryData","currentTarget","reset","onSubmit","this","htmlFor","ref","type","id","defaultValue","Component","Error","message","Weather","showWeather","result","name","weather","main","urlIcon","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","query","queryApi","url","fetch","then","response","json","data","setState","catch","console","log","prevProps","prevState","result2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c697ef70.chunk.js","sourcesContent":["import  React from 'react';\n\nconst Header = (props) => {\n    return(\n        <div className=\"container\">\n            <header>\n                <h1 className=\" text-center text-white display-4 mt-5 mb-5\">\n                    {props.title}\n                </h1>\n            </header>\n        </div>\n\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\tclass Form extends Component {\n\n\t\t//\tRef\n\t\tcityRef = React.createRef();\n\t\tcountryRef = React.createRef();\n\n\t\tweatherSearch = (e) => {\n\t\t\t//\tprevenir el default\n\t\t\te.preventDefault();\t\t\t\n\t\t\t\n\t\t\t//\tleer los Ref y crear el objeto\n\t\t\tconst search = {\n\t\t\t\tcity: this.cityRef.current.value,\n\t\t\t\tcountry: this.countryRef.current.value\n\t\t\t};\n\t\t\t\n\t\t\t//\tenviar por props\n\t\t\tthis.props.queryData(search);\n\n\t\t\t//\treset formulario\n\t\t\te.currentTarget.reset();\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"card col-md-4\">\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<form onSubmit={this.weatherSearch}>\n\n\t\t\t\t\t\t\t\t<div className=\"md-form mb-3\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"citynput\">Ciudad:</label>\n\t\t\t\t\t\t\t\t\t<input  ref={this.cityRef} type=\"text\" id=\"cityInput\" className=\"form-control\"/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"md-form mt-5 pt-5\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"countrySelect\" className=\"\">Pais:</label>\n\t\t\t\t\t\t\t\t\t<select ref={this.countryRef} className=\"custom-select mb-3\" id=\"countrySelect\">\n\t\t\t\t\t\t\t\t\t\t<option value=\"\" defaultValue>Elije un Pais</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"AR\">Argentina</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"AU\">Australia</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"BO\">Bolivia</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"BR\">Brasil</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"CA\">Canada</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"CL\">Chile</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"CO\">Colombia</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"ES\">Espa√±a</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"MX\">Mexico</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"US\">Estados Unidos</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"VE\">Venezuela</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t<div className=\"form-group text-center mt-2 mb-3 pt-2\">\n          \t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-block rounded-pill  blue-gradient\">Buscar</button>\n       \t\t\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t\t</div>\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\nexport default Form;","import React from 'react';\n\nconst Error = (props) => {\n    return (\n        <div className=\"container mb-3\">\n            <div className=\"row justify-content-center\">\n                <div className=\"card red lighten-1\">\n                    <div className=\"card-body\">\n                        <p className=\"lead card-title text-white\">{props.message}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Error;","import React, { Component }from 'react';\n\nclass Weather extends Component {\n\n    showWeather = () => {\n        //  obtener los datos\n        const { name, weather, main} = this.props.result\n\n        if(!name || !weather || !main) {\n            return null;\n        }\n\n        const kelvin = 273.15\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`\n        const alt = `clima de ${name}`\n\n        return(\n            <div className=\"row justify-content-center\">\n                <div className=\"card col-md-6 info-color-dark mt-3\">\n\t\t\t\t\t<div className=\"card-body text-center\">\n                        <span>\n                            <h2>Resultado clima de: {name}</h2>\n                            <p>\n                                Temperatura:\n                                Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\n                                <img src={urlIcon} alt={alt}></img>\n                            </p>\n                            <p>Maxima: { (main.temp_max - kelvin).toFixed(2) } &deg;C</p>\n                            <p>minima: { (main.temp_min - kelvin).toFixed(2) } &deg;C</p>\n                        </span>\n                    </div>\n                </div>\n     \n            </div>\n            \n        )\n    }\n\n    render() { \n        return (\n            <div className=\"container\">\n               {this.showWeather()}\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport './css/App.css';\n\n//  components\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Error from './components/Error';\nimport Weather from './components/Weather';\n\n\nclass App extends Component {\n\n\tstate = {\n\t\terror: '',\n\t\tquery: {},\n\t\tresult: {}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\terror: false\n\t\t})\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif(prevState.query !== this.state.query){\n\t\t\tthis.queryApi();\n\t\t}\n\t}\n\n\tqueryApi = () => {\n\t\tconst { city, country } = this.state.query;\n\t\tif(!city || !country) {\n\t\t\treturn null\n\t\t}\n\n\t\t//\tleer la url y agregar el API key\n\t\tconst apiId = 'f9b032d3dfbb5a228af1254b6aa151a5';\n\t\tlet url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiId}`;\n\n\t\t//\tquery con fecth api\n\t\tfetch(url)\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tresult: data\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t}\n\n\tqueryData = (search) => {\n\t\tif (search.city === '' || search.country === '') {\n\t\t\tthis.setState({\n\t\t\t\terror: true\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\terror: false,\n\t\t\t\tquery: search\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\n\t\t//\tMesaje de error\n\t\tconst error = this.state.error;\n\n\t\tlet result;\n\t\tlet result2;\n\n\t\tif(error) {\n\t\t\tresult = <Error message=\"Todos los campos son Obligatorios!\" />\n\t\t} else {\n\t\t\tresult2 = <Weather result={this.state.result}/>\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header title = 'React App Clima' />\n\t\t\t\t{result}\t\t\t\t\t\n\t\t\t\t<Form queryData = {this.queryData} />\n\t\t\t\t{result2}\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}